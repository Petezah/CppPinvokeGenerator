// This file is auto-generated by Petezah/CppPinvokeGenerator (EgorBo/CppPinvokeGenerator). Do not edit.

using System;
using System.Runtime.InteropServices;
using Microsoft.Win32.SafeHandles;

namespace TestAPI
{
    public partial class BoolTrivialTemplate : SafeHandleZeroOrMinusOneIsInvalid
    {
        #region Handle
        /// <summary>
        /// Pointer to the underlying native object
        /// </summary>
        public IntPtr Handle => DangerousGetHandle();

        /// <summary>
        /// Create BoolTrivialTemplate from a native pointer
        /// if letGcDeleteNativeObject is false GC won't release the underlying object (use ONLY if you know it will be handled by some other native object)
        /// </summary>
        public BoolTrivialTemplate(IntPtr handle, bool letGcDeleteNativeObject) : base(letGcDeleteNativeObject) => SetHandle(handle);
        #endregion

        #region API
        public BoolTrivialTemplate() : base(ownsHandle: true) => SetHandle(BoolTrivialTemplate_BoolTrivialTemplate_0());

        public Boolean Val => GetVal();
        
        private Boolean GetVal() => BoolTrivialTemplate_GetVal_0(Handle) > 0;
        #endregion

        #region DllImports
        [DllImport(TestAPIN.NativeLib, CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr BoolTrivialTemplate_BoolTrivialTemplate_0();

        [DllImport(TestAPIN.NativeLib, CallingConvention = CallingConvention.Cdecl)]
        private static extern Byte/*bool*/ BoolTrivialTemplate_GetVal_0(IntPtr target);
        #endregion

        #region ReleaseHandle
        protected override bool ReleaseHandle()
        {
            BoolTrivialTemplate__delete(Handle);
            return true;
        }

        [DllImport(TestAPIN.NativeLib, CallingConvention = CallingConvention.Cdecl)]
        private static extern void BoolTrivialTemplate__delete(IntPtr target);
        #endregion
    }
}
